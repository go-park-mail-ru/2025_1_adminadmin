// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2025_1_adminadmin/internal/pkg/cart/delivery/grpc/gen (interfaces: CartServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gen "github.com/go-park-mail-ru/2025_1_adminadmin/internal/pkg/cart/delivery/grpc/gen"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockCartServiceClient is a mock of CartServiceClient interface.
type MockCartServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCartServiceClientMockRecorder
}

// MockCartServiceClientMockRecorder is the mock recorder for MockCartServiceClient.
type MockCartServiceClientMockRecorder struct {
	mock *MockCartServiceClient
}

// NewMockCartServiceClient creates a new mock instance.
func NewMockCartServiceClient(ctrl *gomock.Controller) *MockCartServiceClient {
	mock := &MockCartServiceClient{ctrl: ctrl}
	mock.recorder = &MockCartServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartServiceClient) EXPECT() *MockCartServiceClientMockRecorder {
	return m.recorder
}

// ClearCart mocks base method.
func (m *MockCartServiceClient) ClearCart(arg0 context.Context, arg1 *gen.ClearCartRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClearCart", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearCart indicates an expected call of ClearCart.
func (mr *MockCartServiceClientMockRecorder) ClearCart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCart", reflect.TypeOf((*MockCartServiceClient)(nil).ClearCart), varargs...)
}

// CreateOrder mocks base method.
func (m *MockCartServiceClient) CreateOrder(arg0 context.Context, arg1 *gen.CreateOrderRequest, arg2 ...grpc.CallOption) (*gen.OrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrder", varargs...)
	ret0, _ := ret[0].(*gen.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockCartServiceClientMockRecorder) CreateOrder(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockCartServiceClient)(nil).CreateOrder), varargs...)
}

// GetCart mocks base method.
func (m *MockCartServiceClient) GetCart(arg0 context.Context, arg1 *gen.GetCartRequest, arg2 ...grpc.CallOption) (*gen.CartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCart", varargs...)
	ret0, _ := ret[0].(*gen.CartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockCartServiceClientMockRecorder) GetCart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockCartServiceClient)(nil).GetCart), varargs...)
}

// GetOrderById mocks base method.
func (m *MockCartServiceClient) GetOrderById(arg0 context.Context, arg1 *gen.GetOrderByIdRequest, arg2 ...grpc.CallOption) (*gen.OrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrderById", varargs...)
	ret0, _ := ret[0].(*gen.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockCartServiceClientMockRecorder) GetOrderById(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockCartServiceClient)(nil).GetOrderById), varargs...)
}

// GetOrders mocks base method.
func (m *MockCartServiceClient) GetOrders(arg0 context.Context, arg1 *gen.GetOrdersRequest, arg2 ...grpc.CallOption) (*gen.OrderListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrders", varargs...)
	ret0, _ := ret[0].(*gen.OrderListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockCartServiceClientMockRecorder) GetOrders(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockCartServiceClient)(nil).GetOrders), varargs...)
}

// UpdateItemQuantity mocks base method.
func (m *MockCartServiceClient) UpdateItemQuantity(arg0 context.Context, arg1 *gen.UpdateQuantityRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateItemQuantity", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItemQuantity indicates an expected call of UpdateItemQuantity.
func (mr *MockCartServiceClientMockRecorder) UpdateItemQuantity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemQuantity", reflect.TypeOf((*MockCartServiceClient)(nil).UpdateItemQuantity), varargs...)
}

// UpdateOrderStatus mocks base method.
func (m *MockCartServiceClient) UpdateOrderStatus(arg0 context.Context, arg1 *gen.UpdateOrderStatusRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrderStatus", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockCartServiceClientMockRecorder) UpdateOrderStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockCartServiceClient)(nil).UpdateOrderStatus), varargs...)
}
