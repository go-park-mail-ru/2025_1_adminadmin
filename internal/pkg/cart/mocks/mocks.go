// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/cart/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_adminadmin/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/uuid"
)

// MockCartRepo is a mock of CartRepo interface.
type MockCartRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepoMockRecorder
}

// MockCartRepoMockRecorder is the mock recorder for MockCartRepo.
type MockCartRepoMockRecorder struct {
	mock *MockCartRepo
}

// NewMockCartRepo creates a new mock instance.
func NewMockCartRepo(ctrl *gomock.Controller) *MockCartRepo {
	mock := &MockCartRepo{ctrl: ctrl}
	mock.recorder = &MockCartRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepo) EXPECT() *MockCartRepoMockRecorder {
	return m.recorder
}

// ClearCart mocks base method.
func (m *MockCartRepo) ClearCart(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearCart", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearCart indicates an expected call of ClearCart.
func (mr *MockCartRepoMockRecorder) ClearCart(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCart", reflect.TypeOf((*MockCartRepo)(nil).ClearCart), ctx, userID)
}

// GetAllByUser mocks base method.
func (m *MockCartRepo) GetAllByUser(ctx context.Context, userID uuid.UUID) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUser", ctx, userID)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUser indicates an expected call of GetAllByUser.
func (mr *MockCartRepoMockRecorder) GetAllByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUser", reflect.TypeOf((*MockCartRepo)(nil).GetAllByUser), ctx, userID)
}

// GetByID mocks base method.
func (m *MockCartRepo) GetByID(ctx context.Context, id uuid.UUID) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCartRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCartRepo)(nil).GetByID), ctx, id)
}

// GetCart mocks base method.
func (m *MockCartRepo) GetCart(ctx context.Context, userID string) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", ctx, userID)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockCartRepoMockRecorder) GetCart(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockCartRepo)(nil).GetCart), ctx, userID)
}

// Save mocks base method.
func (m *MockCartRepo) Save(ctx context.Context, order models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCartRepoMockRecorder) Save(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCartRepo)(nil).Save), ctx, order)
}

// UpdateItemQuantity mocks base method.
func (m *MockCartRepo) UpdateItemQuantity(ctx context.Context, userID, productID, restaurantId string, quantity int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemQuantity", ctx, userID, productID, restaurantId, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemQuantity indicates an expected call of UpdateItemQuantity.
func (mr *MockCartRepoMockRecorder) UpdateItemQuantity(ctx, userID, productID, restaurantId, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemQuantity", reflect.TypeOf((*MockCartRepo)(nil).UpdateItemQuantity), ctx, userID, productID, restaurantId, quantity)
}

// UpdateStatus mocks base method.
func (m *MockCartRepo) UpdateStatus(ctx context.Context, orderID uuid.UUID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, orderID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockCartRepoMockRecorder) UpdateStatus(ctx, orderID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockCartRepo)(nil).UpdateStatus), ctx, orderID, status)
}

// MockCartUsecase is a mock of CartUsecase interface.
type MockCartUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCartUsecaseMockRecorder
}

// MockCartUsecaseMockRecorder is the mock recorder for MockCartUsecase.
type MockCartUsecaseMockRecorder struct {
	mock *MockCartUsecase
}

// NewMockCartUsecase creates a new mock instance.
func NewMockCartUsecase(ctrl *gomock.Controller) *MockCartUsecase {
	mock := &MockCartUsecase{ctrl: ctrl}
	mock.recorder = &MockCartUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartUsecase) EXPECT() *MockCartUsecaseMockRecorder {
	return m.recorder
}

// ClearCart mocks base method.
func (m *MockCartUsecase) ClearCart(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearCart", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearCart indicates an expected call of ClearCart.
func (mr *MockCartUsecaseMockRecorder) ClearCart(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCart", reflect.TypeOf((*MockCartUsecase)(nil).ClearCart), ctx, userID)
}

// CreateOrder mocks base method.
func (m *MockCartUsecase) CreateOrder(ctx context.Context, userID string, details models.OrderInReq, cart models.Cart) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, userID, details, cart)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockCartUsecaseMockRecorder) CreateOrder(ctx, userID, details, cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockCartUsecase)(nil).CreateOrder), ctx, userID, details, cart)
}

// GetAllOrdersByUser mocks base method.
func (m *MockCartUsecase) GetAllOrdersByUser(ctx context.Context, userID uuid.UUID) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrdersByUser", ctx, userID)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrdersByUser indicates an expected call of GetAllOrdersByUser.
func (mr *MockCartUsecaseMockRecorder) GetAllOrdersByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrdersByUser", reflect.TypeOf((*MockCartUsecase)(nil).GetAllOrdersByUser), ctx, userID)
}

// GetCart mocks base method.
func (m *MockCartUsecase) GetCart(ctx context.Context, userID string) (models.Cart, error, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", ctx, userID)
	ret0, _ := ret[0].(models.Cart)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// GetCart indicates an expected call of GetCart.
func (mr *MockCartUsecaseMockRecorder) GetCart(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockCartUsecase)(nil).GetCart), ctx, userID)
}

// GetOrderByID mocks base method.
func (m *MockCartUsecase) GetOrderByID(ctx context.Context, id uuid.UUID) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, id)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockCartUsecaseMockRecorder) GetOrderByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockCartUsecase)(nil).GetOrderByID), ctx, id)
}

// UpdateItemQuantity mocks base method.
func (m *MockCartUsecase) UpdateItemQuantity(ctx context.Context, userID, productID, restaurantId string, quantity int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemQuantity", ctx, userID, productID, restaurantId, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemQuantity indicates an expected call of UpdateItemQuantity.
func (mr *MockCartUsecaseMockRecorder) UpdateItemQuantity(ctx, userID, productID, restaurantId, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemQuantity", reflect.TypeOf((*MockCartUsecase)(nil).UpdateItemQuantity), ctx, userID, productID, restaurantId, quantity)
}

// UpdateOrderStatus mocks base method.
func (m *MockCartUsecase) UpdateOrderStatus(ctx context.Context, id uuid.UUID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockCartUsecaseMockRecorder) UpdateOrderStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockCartUsecase)(nil).UpdateOrderStatus), ctx, id, status)
}

// MockRestaurantRepo is a mock of RestaurantRepo interface.
type MockRestaurantRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRestaurantRepoMockRecorder
}

// MockRestaurantRepoMockRecorder is the mock recorder for MockRestaurantRepo.
type MockRestaurantRepoMockRecorder struct {
	mock *MockRestaurantRepo
}

// NewMockRestaurantRepo creates a new mock instance.
func NewMockRestaurantRepo(ctrl *gomock.Controller) *MockRestaurantRepo {
	mock := &MockRestaurantRepo{ctrl: ctrl}
	mock.recorder = &MockRestaurantRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestaurantRepo) EXPECT() *MockRestaurantRepoMockRecorder {
	return m.recorder
}

// GetCartItem mocks base method.
func (m *MockRestaurantRepo) GetCartItem(ctx context.Context, productIDs []string, productAmounts map[string]int, restaurantID string) (models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItem", ctx, productIDs, productAmounts, restaurantID)
	ret0, _ := ret[0].(models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItem indicates an expected call of GetCartItem.
func (mr *MockRestaurantRepoMockRecorder) GetCartItem(ctx, productIDs, productAmounts, restaurantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItem", reflect.TypeOf((*MockRestaurantRepo)(nil).GetCartItem), ctx, productIDs, productAmounts, restaurantID)
}

// Save mocks base method.
func (m *MockRestaurantRepo) Save(ctx context.Context, order models.Order, userLogin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, order, userLogin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRestaurantRepoMockRecorder) Save(ctx, order, userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRestaurantRepo)(nil).Save), ctx, order, userLogin)
}
