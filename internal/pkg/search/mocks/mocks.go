// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/search/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/search/interfaces.go -destination=internal/pkg/search/mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_adminadmin/internal/models"
	uuid "github.com/satori/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockSearchRepo is a mock of SearchRepo interface.
type MockSearchRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSearchRepoMockRecorder
	isgomock struct{}
}

// MockSearchRepoMockRecorder is the mock recorder for MockSearchRepo.
type MockSearchRepoMockRecorder struct {
	mock *MockSearchRepo
}

// NewMockSearchRepo creates a new mock instance.
func NewMockSearchRepo(ctrl *gomock.Controller) *MockSearchRepo {
	mock := &MockSearchRepo{ctrl: ctrl}
	mock.recorder = &MockSearchRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchRepo) EXPECT() *MockSearchRepoMockRecorder {
	return m.recorder
}

// SearchProductsInRestaurant mocks base method.
func (m *MockSearchRepo) SearchProductsInRestaurant(ctx context.Context, restaurantID uuid.UUID, query string) ([]models.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProductsInRestaurant", ctx, restaurantID, query)
	ret0, _ := ret[0].([]models.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProductsInRestaurant indicates an expected call of SearchProductsInRestaurant.
func (mr *MockSearchRepoMockRecorder) SearchProductsInRestaurant(ctx, restaurantID, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsInRestaurant", reflect.TypeOf((*MockSearchRepo)(nil).SearchProductsInRestaurant), ctx, restaurantID, query)
}

// SearchRestaurantWithProducts mocks base method.
func (m *MockSearchRepo) SearchRestaurantWithProducts(ctx context.Context, query string, count, offset int) ([]models.RestaurantSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRestaurantWithProducts", ctx, query, count, offset)
	ret0, _ := ret[0].([]models.RestaurantSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRestaurantWithProducts indicates an expected call of SearchRestaurantWithProducts.
func (mr *MockSearchRepoMockRecorder) SearchRestaurantWithProducts(ctx, query, count, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRestaurantWithProducts", reflect.TypeOf((*MockSearchRepo)(nil).SearchRestaurantWithProducts), ctx, query, count, offset)
}

// MockSearchUsecase is a mock of SearchUsecase interface.
type MockSearchUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSearchUsecaseMockRecorder
	isgomock struct{}
}

// MockSearchUsecaseMockRecorder is the mock recorder for MockSearchUsecase.
type MockSearchUsecaseMockRecorder struct {
	mock *MockSearchUsecase
}

// NewMockSearchUsecase creates a new mock instance.
func NewMockSearchUsecase(ctrl *gomock.Controller) *MockSearchUsecase {
	mock := &MockSearchUsecase{ctrl: ctrl}
	mock.recorder = &MockSearchUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchUsecase) EXPECT() *MockSearchUsecaseMockRecorder {
	return m.recorder
}

// SearchProductsInRestaurant mocks base method.
func (m *MockSearchUsecase) SearchProductsInRestaurant(ctx context.Context, restaurantID uuid.UUID, query string) ([]models.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProductsInRestaurant", ctx, restaurantID, query)
	ret0, _ := ret[0].([]models.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProductsInRestaurant indicates an expected call of SearchProductsInRestaurant.
func (mr *MockSearchUsecaseMockRecorder) SearchProductsInRestaurant(ctx, restaurantID, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsInRestaurant", reflect.TypeOf((*MockSearchUsecase)(nil).SearchProductsInRestaurant), ctx, restaurantID, query)
}

// SearchRestaurantWithProducts mocks base method.
func (m *MockSearchUsecase) SearchRestaurantWithProducts(ctx context.Context, query string, count, offset int) ([]models.RestaurantSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRestaurantWithProducts", ctx, query, count, offset)
	ret0, _ := ret[0].([]models.RestaurantSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRestaurantWithProducts indicates an expected call of SearchRestaurantWithProducts.
func (mr *MockSearchUsecaseMockRecorder) SearchRestaurantWithProducts(ctx, query, count, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRestaurantWithProducts", reflect.TypeOf((*MockSearchUsecase)(nil).SearchRestaurantWithProducts), ctx, query, count, offset)
}
