// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/auth/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_adminadmin/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/uuid"
)

// MockAuthRepo is a mock of AuthRepo interface.
type MockAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoMockRecorder
}

// MockAuthRepoMockRecorder is the mock recorder for MockAuthRepo.
type MockAuthRepoMockRecorder struct {
	mock *MockAuthRepo
}

// NewMockAuthRepo creates a new mock instance.
func NewMockAuthRepo(ctrl *gomock.Controller) *MockAuthRepo {
	mock := &MockAuthRepo{ctrl: ctrl}
	mock.recorder = &MockAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepo) EXPECT() *MockAuthRepoMockRecorder {
	return m.recorder
}

// AddressExists mocks base method.
func (m *MockAuthRepo) AddressExists(ctx context.Context, address string, userID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressExists", ctx, address, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddressExists indicates an expected call of AddressExists.
func (mr *MockAuthRepoMockRecorder) AddressExists(ctx, address, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressExists", reflect.TypeOf((*MockAuthRepo)(nil).AddressExists), ctx, address, userID)
}

// DeleteAddress mocks base method.
func (m *MockAuthRepo) DeleteAddress(ctx context.Context, addressId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", ctx, addressId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockAuthRepoMockRecorder) DeleteAddress(ctx, addressId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockAuthRepo)(nil).DeleteAddress), ctx, addressId)
}

// InsertAddress mocks base method.
func (m *MockAuthRepo) InsertAddress(ctx context.Context, address models.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAddress", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAddress indicates an expected call of InsertAddress.
func (mr *MockAuthRepoMockRecorder) InsertAddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAddress", reflect.TypeOf((*MockAuthRepo)(nil).InsertAddress), ctx, address)
}

// InsertUser mocks base method.
func (m *MockAuthRepo) InsertUser(ctx context.Context, user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockAuthRepoMockRecorder) InsertUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockAuthRepo)(nil).InsertUser), ctx, user)
}

// SelectUserAddresses mocks base method.
func (m *MockAuthRepo) SelectUserAddresses(ctx context.Context, login string) ([]models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserAddresses", ctx, login)
	ret0, _ := ret[0].([]models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserAddresses indicates an expected call of SelectUserAddresses.
func (mr *MockAuthRepoMockRecorder) SelectUserAddresses(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserAddresses", reflect.TypeOf((*MockAuthRepo)(nil).SelectUserAddresses), ctx, login)
}

// SelectUserByLogin mocks base method.
func (m *MockAuthRepo) SelectUserByLogin(ctx context.Context, login string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByLogin", ctx, login)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByLogin indicates an expected call of SelectUserByLogin.
func (mr *MockAuthRepoMockRecorder) SelectUserByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByLogin", reflect.TypeOf((*MockAuthRepo)(nil).SelectUserByLogin), ctx, login)
}

// UpdateUser mocks base method.
func (m *MockAuthRepo) UpdateUser(ctx context.Context, user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockAuthRepoMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockAuthRepo)(nil).UpdateUser), ctx, user)
}

// UpdateUserPic mocks base method.
func (m *MockAuthRepo) UpdateUserPic(ctx context.Context, login, userPic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPic", ctx, login, userPic)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPic indicates an expected call of UpdateUserPic.
func (mr *MockAuthRepoMockRecorder) UpdateUserPic(ctx, login, userPic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPic", reflect.TypeOf((*MockAuthRepo)(nil).UpdateUserPic), ctx, login, userPic)
}

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockAuthUsecase) AddAddress(ctx context.Context, address models.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockAuthUsecaseMockRecorder) AddAddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockAuthUsecase)(nil).AddAddress), ctx, address)
}

// Check mocks base method.
func (m *MockAuthUsecase) Check(ctx context.Context, login string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, login)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockAuthUsecaseMockRecorder) Check(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockAuthUsecase)(nil).Check), ctx, login)
}

// DeleteAddress mocks base method.
func (m *MockAuthUsecase) DeleteAddress(ctx context.Context, addressId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", ctx, addressId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockAuthUsecaseMockRecorder) DeleteAddress(ctx, addressId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockAuthUsecase)(nil).DeleteAddress), ctx, addressId)
}

// GetUserAddresses mocks base method.
func (m *MockAuthUsecase) GetUserAddresses(ctx context.Context, login string) ([]models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAddresses", ctx, login)
	ret0, _ := ret[0].([]models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAddresses indicates an expected call of GetUserAddresses.
func (mr *MockAuthUsecaseMockRecorder) GetUserAddresses(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAddresses", reflect.TypeOf((*MockAuthUsecase)(nil).GetUserAddresses), ctx, login)
}

// SignIn mocks base method.
func (m *MockAuthUsecase) SignIn(ctx context.Context, data models.SignInReq) (models.User, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, data)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthUsecaseMockRecorder) SignIn(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthUsecase)(nil).SignIn), ctx, data)
}

// SignUp mocks base method.
func (m *MockAuthUsecase) SignUp(ctx context.Context, data models.SignUpReq) (models.User, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, data)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthUsecaseMockRecorder) SignUp(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthUsecase)(nil).SignUp), ctx, data)
}

// UpdateUser mocks base method.
func (m *MockAuthUsecase) UpdateUser(ctx context.Context, login string, updateData models.UpdateUserReq) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, login, updateData)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockAuthUsecaseMockRecorder) UpdateUser(ctx, login, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockAuthUsecase)(nil).UpdateUser), ctx, login, updateData)
}

// UpdateUserPic mocks base method.
func (m *MockAuthUsecase) UpdateUserPic(ctx context.Context, login string, picture io.ReadSeeker, extension string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPic", ctx, login, picture, extension)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPic indicates an expected call of UpdateUserPic.
func (mr *MockAuthUsecaseMockRecorder) UpdateUserPic(ctx, login, picture, extension interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPic", reflect.TypeOf((*MockAuthUsecase)(nil).UpdateUserPic), ctx, login, picture, extension)
}
