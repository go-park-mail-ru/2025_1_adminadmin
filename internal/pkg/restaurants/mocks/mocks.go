// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/restaurants/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2025_1_adminadmin/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/uuid"
)

// MockRestaurantRepo is a mock of RestaurantRepo interface.
type MockRestaurantRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRestaurantRepoMockRecorder
}

// MockRestaurantRepoMockRecorder is the mock recorder for MockRestaurantRepo.
type MockRestaurantRepoMockRecorder struct {
	mock *MockRestaurantRepo
}

// NewMockRestaurantRepo creates a new mock instance.
func NewMockRestaurantRepo(ctrl *gomock.Controller) *MockRestaurantRepo {
	mock := &MockRestaurantRepo{ctrl: ctrl}
	mock.recorder = &MockRestaurantRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestaurantRepo) EXPECT() *MockRestaurantRepoMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockRestaurantRepo) GetAll(ctx context.Context, count, offset int) ([]models.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, count, offset)
	ret0, _ := ret[0].([]models.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRestaurantRepoMockRecorder) GetAll(ctx, count, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRestaurantRepo)(nil).GetAll), ctx, count, offset)
}

// GetById mocks base method.
func (m *MockRestaurantRepo) GetById(ctx context.Context, id uuid.UUID) (*models.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*models.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockRestaurantRepoMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRestaurantRepo)(nil).GetById), ctx, id)
}

// GetProductsByRestaurant mocks base method.
func (m *MockRestaurantRepo) GetProductsByRestaurant(ctx context.Context, restaurantID uuid.UUID, count, offset int) (*models.RestaurantFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByRestaurant", ctx, restaurantID, count, offset)
	ret0, _ := ret[0].(*models.RestaurantFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByRestaurant indicates an expected call of GetProductsByRestaurant.
func (mr *MockRestaurantRepoMockRecorder) GetProductsByRestaurant(ctx, restaurantID, count, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByRestaurant", reflect.TypeOf((*MockRestaurantRepo)(nil).GetProductsByRestaurant), ctx, restaurantID, count, offset)
}

// MockRestaurantUsecase is a mock of RestaurantUsecase interface.
type MockRestaurantUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRestaurantUsecaseMockRecorder
}

// MockRestaurantUsecaseMockRecorder is the mock recorder for MockRestaurantUsecase.
type MockRestaurantUsecaseMockRecorder struct {
	mock *MockRestaurantUsecase
}

// NewMockRestaurantUsecase creates a new mock instance.
func NewMockRestaurantUsecase(ctrl *gomock.Controller) *MockRestaurantUsecase {
	mock := &MockRestaurantUsecase{ctrl: ctrl}
	mock.recorder = &MockRestaurantUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestaurantUsecase) EXPECT() *MockRestaurantUsecaseMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockRestaurantUsecase) GetAll(ctx context.Context, count, offset int) ([]models.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, count, offset)
	ret0, _ := ret[0].([]models.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRestaurantUsecaseMockRecorder) GetAll(ctx, count, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRestaurantUsecase)(nil).GetAll), ctx, count, offset)
}

// GetById mocks base method.
func (m *MockRestaurantUsecase) GetById(ctx context.Context, id uuid.UUID) (*models.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*models.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockRestaurantUsecaseMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRestaurantUsecase)(nil).GetById), ctx, id)
}

// GetProductsByRestaurant mocks base method.
func (m *MockRestaurantUsecase) GetProductsByRestaurant(ctx context.Context, restaurantID uuid.UUID, count, offset int) (*models.RestaurantFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByRestaurant", ctx, restaurantID, count, offset)
	ret0, _ := ret[0].(*models.RestaurantFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByRestaurant indicates an expected call of GetProductsByRestaurant.
func (mr *MockRestaurantUsecaseMockRecorder) GetProductsByRestaurant(ctx, restaurantID, count, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByRestaurant", reflect.TypeOf((*MockRestaurantUsecase)(nil).GetProductsByRestaurant), ctx, restaurantID, count, offset)
}
