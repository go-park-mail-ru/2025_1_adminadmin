// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson16134a91DecodeGithubComGoParkMailRu20251AdminadminInternalModels(in *jlexer.Lexer, out *RestaurantSearch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "name":
			out.Name = string(in.String())
		case "image_url":
			out.BannerURL = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "rating":
			out.Rating = float64(in.Float64())
		case "rating_count":
			out.RatingCount = float64(in.Float64())
		case "description":
			out.Description = string(in.String())
		case "products":
			if in.IsNull() {
				in.Skip()
				out.Products = nil
			} else {
				in.Delim('[')
				if out.Products == nil {
					if !in.IsDelim(']') {
						out.Products = make([]ProductSearch, 0, 0)
					} else {
						out.Products = []ProductSearch{}
					}
				} else {
					out.Products = (out.Products)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ProductSearch
					(v1).UnmarshalEasyJSON(in)
					out.Products = append(out.Products, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16134a91EncodeGithubComGoParkMailRu20251AdminadminInternalModels(out *jwriter.Writer, in RestaurantSearch) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"image_url\":"
		out.RawString(prefix)
		out.String(string(in.BannerURL))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	{
		const prefix string = ",\"rating_count\":"
		out.RawString(prefix)
		out.Float64(float64(in.RatingCount))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"products\":"
		out.RawString(prefix)
		if in.Products == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Products {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RestaurantSearch) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16134a91EncodeGithubComGoParkMailRu20251AdminadminInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RestaurantSearch) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16134a91EncodeGithubComGoParkMailRu20251AdminadminInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RestaurantSearch) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16134a91DecodeGithubComGoParkMailRu20251AdminadminInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RestaurantSearch) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16134a91DecodeGithubComGoParkMailRu20251AdminadminInternalModels(l, v)
}
func easyjson16134a91DecodeGithubComGoParkMailRu20251AdminadminInternalModels1(in *jlexer.Lexer, out *Restaurant) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Id).UnmarshalText(data))
			}
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "rating":
			out.Rating = float64(in.Float64())
		case "image_url":
			out.ImageURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16134a91EncodeGithubComGoParkMailRu20251AdminadminInternalModels1(out *jwriter.Writer, in Restaurant) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.Id).MarshalText())
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	{
		const prefix string = ",\"image_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Restaurant) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16134a91EncodeGithubComGoParkMailRu20251AdminadminInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Restaurant) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16134a91EncodeGithubComGoParkMailRu20251AdminadminInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Restaurant) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16134a91DecodeGithubComGoParkMailRu20251AdminadminInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Restaurant) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16134a91DecodeGithubComGoParkMailRu20251AdminadminInternalModels1(l, v)
}
func easyjson16134a91DecodeGithubComGoParkMailRu20251AdminadminInternalModels2(in *jlexer.Lexer, out *ProductSearch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "name":
			out.Name = string(in.String())
		case "price":
			out.Price = float64(in.Float64())
		case "image_url":
			out.ImageURL = string(in.String())
		case "weight":
			out.Weight = int(in.Int())
		case "category":
			out.Category = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16134a91EncodeGithubComGoParkMailRu20251AdminadminInternalModels2(out *jwriter.Writer, in ProductSearch) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"image_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageURL))
	}
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		out.Int(int(in.Weight))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProductSearch) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16134a91EncodeGithubComGoParkMailRu20251AdminadminInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProductSearch) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16134a91EncodeGithubComGoParkMailRu20251AdminadminInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProductSearch) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16134a91DecodeGithubComGoParkMailRu20251AdminadminInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProductSearch) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16134a91DecodeGithubComGoParkMailRu20251AdminadminInternalModels2(l, v)
}
func easyjson16134a91DecodeGithubComGoParkMailRu20251AdminadminInternalModels3(in *jlexer.Lexer, out *ProductCategory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "products":
			if in.IsNull() {
				in.Skip()
				out.Products = nil
			} else {
				in.Delim('[')
				if out.Products == nil {
					if !in.IsDelim(']') {
						out.Products = make([]ProductSearch, 0, 0)
					} else {
						out.Products = []ProductSearch{}
					}
				} else {
					out.Products = (out.Products)[:0]
				}
				for !in.IsDelim(']') {
					var v4 ProductSearch
					(v4).UnmarshalEasyJSON(in)
					out.Products = append(out.Products, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16134a91EncodeGithubComGoParkMailRu20251AdminadminInternalModels3(out *jwriter.Writer, in ProductCategory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"products\":"
		out.RawString(prefix)
		if in.Products == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Products {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProductCategory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16134a91EncodeGithubComGoParkMailRu20251AdminadminInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProductCategory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16134a91EncodeGithubComGoParkMailRu20251AdminadminInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProductCategory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16134a91DecodeGithubComGoParkMailRu20251AdminadminInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProductCategory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16134a91DecodeGithubComGoParkMailRu20251AdminadminInternalModels3(l, v)
}
