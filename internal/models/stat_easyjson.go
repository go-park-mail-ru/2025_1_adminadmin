// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels(in *jlexer.Lexer, out *Vote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.QuestionId).UnmarshalText(data))
			}
		case "voice":
			out.Voice = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels(out *jwriter.Writer, in Vote) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.QuestionId).MarshalText())
	}
	{
		const prefix string = ",\"voice\":"
		out.RawString(prefix)
		out.Int(int(in.Voice))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Vote) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vote) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Vote) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vote) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels(l, v)
}
func easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels1(in *jlexer.Lexer, out *StatResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.QuestionId).UnmarshalText(data))
			}
		case "title":
			out.Title = string(in.String())
		case "question_type":
			out.QuestionType = string(in.String())
		case "stats":
			if m, ok := out.Stats.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Stats.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Stats = in.Interface()
			}
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels1(out *jwriter.Writer, in StatResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.QuestionId).MarshalText())
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"question_type\":"
		out.RawString(prefix)
		out.String(string(in.QuestionType))
	}
	{
		const prefix string = ",\"stats\":"
		out.RawString(prefix)
		if m, ok := in.Stats.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Stats.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Stats))
		}
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels1(l, v)
}
func easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels2(in *jlexer.Lexer, out *Stat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.QuestionId).UnmarshalText(data))
			}
		case "title":
			out.Title = string(in.String())
		case "question_type":
			out.QuestionType = string(in.String())
		case "voice":
			out.Voice = int(in.Int())
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels2(out *jwriter.Writer, in Stat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.QuestionId).MarshalText())
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"question_type\":"
		out.RawString(prefix)
		out.String(string(in.QuestionType))
	}
	{
		const prefix string = ",\"voice\":"
		out.RawString(prefix)
		out.Int(int(in.Voice))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels2(l, v)
}
func easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels3(in *jlexer.Lexer, out *Result) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Id).UnmarshalText(data))
			}
		case "question_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.QuestionId).UnmarshalText(data))
			}
		case "voice":
			out.Voice = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels3(out *jwriter.Writer, in Result) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.Id).MarshalText())
	}
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix)
		out.RawText((in.QuestionId).MarshalText())
	}
	{
		const prefix string = ",\"voice\":"
		out.RawString(prefix)
		out.Int(int(in.Voice))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Result) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Result) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Result) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Result) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels3(l, v)
}
func easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels4(in *jlexer.Lexer, out *Question) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Id).UnmarshalText(data))
			}
		case "title":
			out.Title = string(in.String())
		case "min_mark":
			out.MinMark = int(in.Int())
		case "skip":
			out.Skip = int(in.Int())
		case "question_type":
			out.QuestionType = string(in.String())
		case "number":
			out.Number = int(in.Int())
		case "survey_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.SurveyId).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels4(out *jwriter.Writer, in Question) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.Id).MarshalText())
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"min_mark\":"
		out.RawString(prefix)
		out.Int(int(in.MinMark))
	}
	{
		const prefix string = ",\"skip\":"
		out.RawString(prefix)
		out.Int(int(in.Skip))
	}
	{
		const prefix string = ",\"question_type\":"
		out.RawString(prefix)
		out.String(string(in.QuestionType))
	}
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix)
		out.Int(int(in.Number))
	}
	{
		const prefix string = ",\"survey_id\":"
		out.RawString(prefix)
		out.RawText((in.SurveyId).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Question) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Question) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Question) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Question) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels4(l, v)
}
func easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels5(in *jlexer.Lexer, out *CreateSurveyRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "questions":
			if in.IsNull() {
				in.Skip()
				out.Questions = nil
			} else {
				in.Delim('[')
				if out.Questions == nil {
					if !in.IsDelim(']') {
						out.Questions = make([]CreateQuestionRequest, 0, 1)
					} else {
						out.Questions = []CreateQuestionRequest{}
					}
				} else {
					out.Questions = (out.Questions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 CreateQuestionRequest
					(v1).UnmarshalEasyJSON(in)
					out.Questions = append(out.Questions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels5(out *jwriter.Writer, in CreateSurveyRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"questions\":"
		out.RawString(prefix[1:])
		if in.Questions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Questions {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateSurveyRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateSurveyRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateSurveyRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateSurveyRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels5(l, v)
}
func easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels6(in *jlexer.Lexer, out *CreateQuestionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "min_mark":
			out.MinMark = int(in.Int())
		case "skip":
			out.Skip = int(in.Int())
		case "question_type":
			out.QuestionType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels6(out *jwriter.Writer, in CreateQuestionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"min_mark\":"
		out.RawString(prefix)
		out.Int(int(in.MinMark))
	}
	{
		const prefix string = ",\"skip\":"
		out.RawString(prefix)
		out.Int(int(in.Skip))
	}
	{
		const prefix string = ",\"question_type\":"
		out.RawString(prefix)
		out.String(string(in.QuestionType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateQuestionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateQuestionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49ddcd6EncodeGithubComGoParkMailRu20251AdminadminInternalModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateQuestionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateQuestionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49ddcd6DecodeGithubComGoParkMailRu20251AdminadminInternalModels6(l, v)
}
