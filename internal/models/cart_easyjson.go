// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDdb0949aDecodeGithubComGoParkMailRu20251AdminadminInternalModels(in *jlexer.Lexer, out *Cart) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int(in.Int())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]CartItem, 0, 2)
					} else {
						out.Items = []CartItem{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 CartItem
					easyjsonDdb0949aDecodeGithubComGoParkMailRu20251AdminadminInternalModels1(in, &v1)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeGithubComGoParkMailRu20251AdminadminInternalModels(out *jwriter.Writer, in Cart) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonDdb0949aEncodeGithubComGoParkMailRu20251AdminadminInternalModels1(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cart) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20251AdminadminInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cart) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20251AdminadminInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cart) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20251AdminadminInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cart) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20251AdminadminInternalModels(l, v)
}
func easyjsonDdb0949aDecodeGithubComGoParkMailRu20251AdminadminInternalModels1(in *jlexer.Lexer, out *CartItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "product_id":
			out.ProductID = int(in.Int())
		case "quantity":
			out.Quantity = int(in.Int())
		case "price":
			out.Price = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeGithubComGoParkMailRu20251AdminadminInternalModels1(out *jwriter.Writer, in CartItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"product_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ProductID))
	}
	{
		const prefix string = ",\"quantity\":"
		out.RawString(prefix)
		out.Int(int(in.Quantity))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	out.RawByte('}')
}
