// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels(in *jlexer.Lexer, out *OrderResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orders":
			if in.IsNull() {
				in.Skip()
				out.Orders = nil
			} else {
				in.Delim('[')
				if out.Orders == nil {
					if !in.IsDelim(']') {
						out.Orders = make([]Order, 0, 0)
					} else {
						out.Orders = []Order{}
					}
				} else {
					out.Orders = (out.Orders)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Order
					(v1).UnmarshalEasyJSON(in)
					out.Orders = append(out.Orders, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total":
			out.Total = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels(out *jwriter.Writer, in OrderResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orders\":"
		out.RawString(prefix[1:])
		if in.Orders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Orders {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int(int(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels(l, v)
}
func easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels1(in *jlexer.Lexer, out *OrderInReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "apartment_or_office":
			out.ApartmentOrOffice = string(in.String())
		case "intercom":
			out.Intercom = string(in.String())
		case "entrance":
			out.Entrance = string(in.String())
		case "floor":
			out.Floor = string(in.String())
		case "courier_comment":
			out.CourierComment = string(in.String())
		case "leave_at_door":
			out.LeaveAtDoor = bool(in.Bool())
		case "final_price":
			out.FinalPrice = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels1(out *jwriter.Writer, in OrderInReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"apartment_or_office\":"
		out.RawString(prefix)
		out.String(string(in.ApartmentOrOffice))
	}
	{
		const prefix string = ",\"intercom\":"
		out.RawString(prefix)
		out.String(string(in.Intercom))
	}
	{
		const prefix string = ",\"entrance\":"
		out.RawString(prefix)
		out.String(string(in.Entrance))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.String(string(in.Floor))
	}
	{
		const prefix string = ",\"courier_comment\":"
		out.RawString(prefix)
		out.String(string(in.CourierComment))
	}
	{
		const prefix string = ",\"leave_at_door\":"
		out.RawString(prefix)
		out.Bool(bool(in.LeaveAtDoor))
	}
	{
		const prefix string = ",\"final_price\":"
		out.RawString(prefix)
		out.Float64(float64(in.FinalPrice))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderInReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderInReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderInReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderInReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels1(l, v)
}
func easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels2(in *jlexer.Lexer, out *Order) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "user":
			out.UserID = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "order_products":
			(out.OrderProducts).UnmarshalEasyJSON(in)
		case "apartment_or_office":
			out.ApartmentOrOffice = string(in.String())
		case "intercom":
			out.Intercom = string(in.String())
		case "entrance":
			out.Entrance = string(in.String())
		case "floor":
			out.Floor = string(in.String())
		case "courier_comment":
			out.CourierComment = string(in.String())
		case "leave_at_door":
			out.LeaveAtDoor = bool(in.Bool())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "final_price":
			out.FinalPrice = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels2(out *jwriter.Writer, in Order) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"order_products\":"
		out.RawString(prefix)
		(in.OrderProducts).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"apartment_or_office\":"
		out.RawString(prefix)
		out.String(string(in.ApartmentOrOffice))
	}
	{
		const prefix string = ",\"intercom\":"
		out.RawString(prefix)
		out.String(string(in.Intercom))
	}
	{
		const prefix string = ",\"entrance\":"
		out.RawString(prefix)
		out.String(string(in.Entrance))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.String(string(in.Floor))
	}
	{
		const prefix string = ",\"courier_comment\":"
		out.RawString(prefix)
		out.String(string(in.CourierComment))
	}
	{
		const prefix string = ",\"leave_at_door\":"
		out.RawString(prefix)
		out.Bool(bool(in.LeaveAtDoor))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"final_price\":"
		out.RawString(prefix)
		out.Float64(float64(in.FinalPrice))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Order) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Order) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Order) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Order) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels2(l, v)
}
func easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels3(in *jlexer.Lexer, out *CartItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Id).UnmarshalText(data))
			}
		case "name":
			out.Name = string(in.String())
		case "price":
			out.Price = float64(in.Float64())
		case "image_url":
			out.ImageURL = string(in.String())
		case "weight":
			out.Weight = int(in.Int())
		case "amount":
			out.Amount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels3(out *jwriter.Writer, in CartItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.Id).MarshalText())
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"image_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageURL))
	}
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		out.Int(int(in.Weight))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int(int(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CartItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CartItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CartItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CartItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels3(l, v)
}
func easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels4(in *jlexer.Lexer, out *CartInReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "quantity":
			out.Quantity = int(in.Int())
		case "restaurant_id":
			out.RestaurantId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels4(out *jwriter.Writer, in CartInReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"quantity\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Quantity))
	}
	{
		const prefix string = ",\"restaurant_id\":"
		out.RawString(prefix)
		out.String(string(in.RestaurantId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CartInReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CartInReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CartInReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CartInReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels4(l, v)
}
func easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels5(in *jlexer.Lexer, out *Cart) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "restaurant_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Id).UnmarshalText(data))
			}
		case "restaurant_name":
			out.Name = string(in.String())
		case "products":
			if in.IsNull() {
				in.Skip()
				out.CartItems = nil
			} else {
				in.Delim('[')
				if out.CartItems == nil {
					if !in.IsDelim(']') {
						out.CartItems = make([]CartItem, 0, 0)
					} else {
						out.CartItems = []CartItem{}
					}
				} else {
					out.CartItems = (out.CartItems)[:0]
				}
				for !in.IsDelim(']') {
					var v4 CartItem
					(v4).UnmarshalEasyJSON(in)
					out.CartItems = append(out.CartItems, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total_sum":
			out.TotalSum = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels5(out *jwriter.Writer, in Cart) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"restaurant_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.Id).MarshalText())
	}
	{
		const prefix string = ",\"restaurant_name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"products\":"
		out.RawString(prefix)
		if in.CartItems == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.CartItems {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"total_sum\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalSum))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cart) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cart) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE590a42aEncodeGithubComGoParkMailRu20251AdminadminInternalModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cart) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cart) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE590a42aDecodeGithubComGoParkMailRu20251AdminadminInternalModels5(l, v)
}
